---
import Button from '~/components/ui/Button.astro';
import type { CallToAction } from '~/types';

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  date?: string;
  countdownActions?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  imageGrid?: string;
}

const {
  id,
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  date = await Astro.slots.render('date'),
  countdownActions = await Astro.slots.render('countdownActions'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  imageGrid = await Astro.slots.render('imageGrid'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  {imageGrid && <div class="absolute inset-0 h-svh top-0 left-0 right-0" aria-hidden="true" set:html={imageGrid} />}
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px]"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-6xl md:text-[5rem] font-bold leading-tighter tracking-tight mb-8 font-heading dark:text-gray-200 z-20"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {subtitle && <p class="text-xl text-muted dark:text-slate-300 mb-24" set:html={subtitle} />}
          {date && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={date} />}
          {
            countdownActions && (
              <div
                class="flex flex-col items-center justify-center gap-y-4 mb-6 dark:text-slate-300"
                set:html={countdownActions}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
